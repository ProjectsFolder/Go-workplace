package test

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i workplace/internal/database.ProductRepository -o ..\..\test\product_repository_mock_test.go -n ProductRepositoryMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"workplace/internal/entity"

	"github.com/gojuno/minimock/v3"
)

// ProductRepositoryMock implements database.ProductRepository
type ProductRepositoryMock struct {
	t minimock.Tester

	funcGetProductsLikeName          func(name string) (pa1 []entity.Product)
	inspectFuncGetProductsLikeName   func(name string)
	afterGetProductsLikeNameCounter  uint64
	beforeGetProductsLikeNameCounter uint64
	GetProductsLikeNameMock          mProductRepositoryMockGetProductsLikeName
}

// NewProductRepositoryMock returns a mock for database.ProductRepository
func NewProductRepositoryMock(t minimock.Tester) *ProductRepositoryMock {
	m := &ProductRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductsLikeNameMock = mProductRepositoryMockGetProductsLikeName{mock: m}
	m.GetProductsLikeNameMock.callArgs = []*ProductRepositoryMockGetProductsLikeNameParams{}

	return m
}

type mProductRepositoryMockGetProductsLikeName struct {
	mock               *ProductRepositoryMock
	defaultExpectation *ProductRepositoryMockGetProductsLikeNameExpectation
	expectations       []*ProductRepositoryMockGetProductsLikeNameExpectation

	callArgs []*ProductRepositoryMockGetProductsLikeNameParams
	mutex    sync.RWMutex
}

// ProductRepositoryMockGetProductsLikeNameExpectation specifies expectation struct of the ProductRepository.GetProductsLikeName
type ProductRepositoryMockGetProductsLikeNameExpectation struct {
	mock    *ProductRepositoryMock
	params  *ProductRepositoryMockGetProductsLikeNameParams
	results *ProductRepositoryMockGetProductsLikeNameResults
	Counter uint64
}

// ProductRepositoryMockGetProductsLikeNameParams contains parameters of the ProductRepository.GetProductsLikeName
type ProductRepositoryMockGetProductsLikeNameParams struct {
	name string
}

// ProductRepositoryMockGetProductsLikeNameResults contains results of the ProductRepository.GetProductsLikeName
type ProductRepositoryMockGetProductsLikeNameResults struct {
	pa1 []entity.Product
}

// Expect sets up expected params for ProductRepository.GetProductsLikeName
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) Expect(name string) *mProductRepositoryMockGetProductsLikeName {
	if mmGetProductsLikeName.mock.funcGetProductsLikeName != nil {
		mmGetProductsLikeName.mock.t.Fatalf("ProductRepositoryMock.GetProductsLikeName mock is already set by Set")
	}

	if mmGetProductsLikeName.defaultExpectation == nil {
		mmGetProductsLikeName.defaultExpectation = &ProductRepositoryMockGetProductsLikeNameExpectation{}
	}

	mmGetProductsLikeName.defaultExpectation.params = &ProductRepositoryMockGetProductsLikeNameParams{name}
	for _, e := range mmGetProductsLikeName.expectations {
		if minimock.Equal(e.params, mmGetProductsLikeName.defaultExpectation.params) {
			mmGetProductsLikeName.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductsLikeName.defaultExpectation.params)
		}
	}

	return mmGetProductsLikeName
}

// Inspect accepts an inspector function that has same arguments as the ProductRepository.GetProductsLikeName
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) Inspect(f func(name string)) *mProductRepositoryMockGetProductsLikeName {
	if mmGetProductsLikeName.mock.inspectFuncGetProductsLikeName != nil {
		mmGetProductsLikeName.mock.t.Fatalf("Inspect function is already set for ProductRepositoryMock.GetProductsLikeName")
	}

	mmGetProductsLikeName.mock.inspectFuncGetProductsLikeName = f

	return mmGetProductsLikeName
}

// Return sets up results that will be returned by ProductRepository.GetProductsLikeName
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) Return(pa1 []entity.Product) *ProductRepositoryMock {
	if mmGetProductsLikeName.mock.funcGetProductsLikeName != nil {
		mmGetProductsLikeName.mock.t.Fatalf("ProductRepositoryMock.GetProductsLikeName mock is already set by Set")
	}

	if mmGetProductsLikeName.defaultExpectation == nil {
		mmGetProductsLikeName.defaultExpectation = &ProductRepositoryMockGetProductsLikeNameExpectation{mock: mmGetProductsLikeName.mock}
	}
	mmGetProductsLikeName.defaultExpectation.results = &ProductRepositoryMockGetProductsLikeNameResults{pa1}
	return mmGetProductsLikeName.mock
}

//Set uses given function f to mock the ProductRepository.GetProductsLikeName method
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) Set(f func(name string) (pa1 []entity.Product)) *ProductRepositoryMock {
	if mmGetProductsLikeName.defaultExpectation != nil {
		mmGetProductsLikeName.mock.t.Fatalf("Default expectation is already set for the ProductRepository.GetProductsLikeName method")
	}

	if len(mmGetProductsLikeName.expectations) > 0 {
		mmGetProductsLikeName.mock.t.Fatalf("Some expectations are already set for the ProductRepository.GetProductsLikeName method")
	}

	mmGetProductsLikeName.mock.funcGetProductsLikeName = f
	return mmGetProductsLikeName.mock
}

// When sets expectation for the ProductRepository.GetProductsLikeName which will trigger the result defined by the following
// Then helper
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) When(name string) *ProductRepositoryMockGetProductsLikeNameExpectation {
	if mmGetProductsLikeName.mock.funcGetProductsLikeName != nil {
		mmGetProductsLikeName.mock.t.Fatalf("ProductRepositoryMock.GetProductsLikeName mock is already set by Set")
	}

	expectation := &ProductRepositoryMockGetProductsLikeNameExpectation{
		mock:   mmGetProductsLikeName.mock,
		params: &ProductRepositoryMockGetProductsLikeNameParams{name},
	}
	mmGetProductsLikeName.expectations = append(mmGetProductsLikeName.expectations, expectation)
	return expectation
}

// Then sets up ProductRepository.GetProductsLikeName return parameters for the expectation previously defined by the When method
func (e *ProductRepositoryMockGetProductsLikeNameExpectation) Then(pa1 []entity.Product) *ProductRepositoryMock {
	e.results = &ProductRepositoryMockGetProductsLikeNameResults{pa1}
	return e.mock
}

// GetProductsLikeName implements database.ProductRepository
func (mmGetProductsLikeName *ProductRepositoryMock) GetProductsLikeName(name string) (pa1 []entity.Product) {
	mm_atomic.AddUint64(&mmGetProductsLikeName.beforeGetProductsLikeNameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductsLikeName.afterGetProductsLikeNameCounter, 1)

	if mmGetProductsLikeName.inspectFuncGetProductsLikeName != nil {
		mmGetProductsLikeName.inspectFuncGetProductsLikeName(name)
	}

	mm_params := &ProductRepositoryMockGetProductsLikeNameParams{name}

	// Record call args
	mmGetProductsLikeName.GetProductsLikeNameMock.mutex.Lock()
	mmGetProductsLikeName.GetProductsLikeNameMock.callArgs = append(mmGetProductsLikeName.GetProductsLikeNameMock.callArgs, mm_params)
	mmGetProductsLikeName.GetProductsLikeNameMock.mutex.Unlock()

	for _, e := range mmGetProductsLikeName.GetProductsLikeNameMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1
		}
	}

	if mmGetProductsLikeName.GetProductsLikeNameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductsLikeName.GetProductsLikeNameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductsLikeName.GetProductsLikeNameMock.defaultExpectation.params
		mm_got := ProductRepositoryMockGetProductsLikeNameParams{name}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductsLikeName.t.Errorf("ProductRepositoryMock.GetProductsLikeName got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductsLikeName.GetProductsLikeNameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductsLikeName.t.Fatal("No results are set for the ProductRepositoryMock.GetProductsLikeName")
		}
		return (*mm_results).pa1
	}
	if mmGetProductsLikeName.funcGetProductsLikeName != nil {
		return mmGetProductsLikeName.funcGetProductsLikeName(name)
	}
	mmGetProductsLikeName.t.Fatalf("Unexpected call to ProductRepositoryMock.GetProductsLikeName. %v", name)
	return
}

// GetProductsLikeNameAfterCounter returns a count of finished ProductRepositoryMock.GetProductsLikeName invocations
func (mmGetProductsLikeName *ProductRepositoryMock) GetProductsLikeNameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductsLikeName.afterGetProductsLikeNameCounter)
}

// GetProductsLikeNameBeforeCounter returns a count of ProductRepositoryMock.GetProductsLikeName invocations
func (mmGetProductsLikeName *ProductRepositoryMock) GetProductsLikeNameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductsLikeName.beforeGetProductsLikeNameCounter)
}

// Calls returns a list of arguments used in each call to ProductRepositoryMock.GetProductsLikeName.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductsLikeName *mProductRepositoryMockGetProductsLikeName) Calls() []*ProductRepositoryMockGetProductsLikeNameParams {
	mmGetProductsLikeName.mutex.RLock()

	argCopy := make([]*ProductRepositoryMockGetProductsLikeNameParams, len(mmGetProductsLikeName.callArgs))
	copy(argCopy, mmGetProductsLikeName.callArgs)

	mmGetProductsLikeName.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductsLikeNameDone returns true if the count of the GetProductsLikeName invocations corresponds
// the number of defined expectations
func (m *ProductRepositoryMock) MinimockGetProductsLikeNameDone() bool {
	for _, e := range m.GetProductsLikeNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsLikeNameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsLikeNameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductsLikeName != nil && mm_atomic.LoadUint64(&m.afterGetProductsLikeNameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductsLikeNameInspect logs each unmet expectation
func (m *ProductRepositoryMock) MinimockGetProductsLikeNameInspect() {
	for _, e := range m.GetProductsLikeNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductRepositoryMock.GetProductsLikeName with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsLikeNameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsLikeNameCounter) < 1 {
		if m.GetProductsLikeNameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductRepositoryMock.GetProductsLikeName")
		} else {
			m.t.Errorf("Expected call to ProductRepositoryMock.GetProductsLikeName with params: %#v", *m.GetProductsLikeNameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductsLikeName != nil && mm_atomic.LoadUint64(&m.afterGetProductsLikeNameCounter) < 1 {
		m.t.Error("Expected call to ProductRepositoryMock.GetProductsLikeName")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductsLikeNameInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductsLikeNameDone()
}
